/**
 * @fileoverview gRPC-Web generated client stub for teddy.todos.notification
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: notification.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as notification_pb from './notification_pb'; // proto import: "notification.proto"


export class NotificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSubscribeToNotifications = new grpcWeb.MethodDescriptor(
    '/teddy.todos.notification.NotificationService/SubscribeToNotifications',
    grpcWeb.MethodType.SERVER_STREAMING,
    notification_pb.SubscribeToNotificationsRequest,
    notification_pb.Notification,
    (request: notification_pb.SubscribeToNotificationsRequest) => {
      return request.serializeBinary();
    },
    notification_pb.Notification.deserializeBinary
  );

  subscribeToNotifications(
    request: notification_pb.SubscribeToNotificationsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<notification_pb.Notification> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/teddy.todos.notification.NotificationService/SubscribeToNotifications',
      request,
      metadata || {},
      this.methodDescriptorSubscribeToNotifications);
  }

  methodDescriptorGetNotifications = new grpcWeb.MethodDescriptor(
    '/teddy.todos.notification.NotificationService/GetNotifications',
    grpcWeb.MethodType.UNARY,
    notification_pb.GetNotificationsRequest,
    notification_pb.GetNotificationsResponse,
    (request: notification_pb.GetNotificationsRequest) => {
      return request.serializeBinary();
    },
    notification_pb.GetNotificationsResponse.deserializeBinary
  );

  getNotifications(
    request: notification_pb.GetNotificationsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<notification_pb.GetNotificationsResponse>;

  getNotifications(
    request: notification_pb.GetNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.GetNotificationsResponse) => void): grpcWeb.ClientReadableStream<notification_pb.GetNotificationsResponse>;

  getNotifications(
    request: notification_pb.GetNotificationsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.GetNotificationsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/teddy.todos.notification.NotificationService/GetNotifications',
        request,
        metadata || {},
        this.methodDescriptorGetNotifications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/teddy.todos.notification.NotificationService/GetNotifications',
    request,
    metadata || {},
    this.methodDescriptorGetNotifications);
  }

  methodDescriptorSetRead = new grpcWeb.MethodDescriptor(
    '/teddy.todos.notification.NotificationService/SetRead',
    grpcWeb.MethodType.UNARY,
    notification_pb.SetReadRequest,
    notification_pb.Notification,
    (request: notification_pb.SetReadRequest) => {
      return request.serializeBinary();
    },
    notification_pb.Notification.deserializeBinary
  );

  setRead(
    request: notification_pb.SetReadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<notification_pb.Notification>;

  setRead(
    request: notification_pb.SetReadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void): grpcWeb.ClientReadableStream<notification_pb.Notification>;

  setRead(
    request: notification_pb.SetReadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: notification_pb.Notification) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/teddy.todos.notification.NotificationService/SetRead',
        request,
        metadata || {},
        this.methodDescriptorSetRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/teddy.todos.notification.NotificationService/SetRead',
    request,
    metadata || {},
    this.methodDescriptorSetRead);
  }

}

